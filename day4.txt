What is Ansible?
==========================
	Config mgmt tool
	deployment tool
	written in Python
	From Redhat
	Agent Less
	Release
		CMD = CMD - Free - OpenSource
		GUI = CMD + GUI + Free for 10 Nodes + Paid
	DSL
	------------
	SYSTEM(Compiled)	Interpreted			DOMAIN SPECI LANG
	C, Java,C++, DOTNET 	perl, php, python		Ant - Maven - Jquery - Foundation - Ansible
								XML -> YAML | JSON
								Exprsss --- Tool would get you a things
What is Config mgmt?
==============================
	Server(S) config mgmt

--------Resources--------	------------------------
What is there in server?	| What you config/change?	| 	How you change?
file				   	property			A D M
service					property			s S e D
directory
user
group
bash
ps
package					property			I U U

===================================================================================================
Other tool
	CODING -> Ansible -> Puppet -> Chef -> Salt -> Cfengine
	GUI - Octopus Deploy -> Udeploy
	https://www.devopsschool.com/path/

	Terraform - Coding for Infra --100-	- ONE LANG
	Ansible - Change management in Server(S)
	---------------------------------------------
	terraform	ansible
	create		create
	modify		modify
	destroy		not destroy
====================================================================
Why Ansible?
=======================
		Easy to learn, Debug, Share, test, Extend
			comparing - java python c c++ perl 

		Ansible is cross platform
			shell - would not work on all linux /windows
			ps - wont work in linux

		Ability to manage large servers at a time parrell.


		IDEOmPOTENT
		FIrST - 1 SERVER - 10 STEPS - 1 MINS - 10 MINS
		Second - 1 SeRVER - 3 STEPS - 1 mins - 3 mins.
		------------------------------------------------
		Tool would check if a actual resources is already as per desire
					No change


=================================================================
Ansible Artichitecture
===========================================================

Ansible Control Server(ACS)			Ansible Remote Server(ARS)
---------------------------------------------------------------------------
Linux						Any
64 bit						Any
Ansible						NA
---------------------------WINDOWS--------------> winrm
---------------------------LINUX --------------> SSh
Python2.7					Python(Linux) or PS.3-dot(WINDOWS)

==============================================================================================
Roles in Ansible?
============================
Dev
	Will write programs -test 

Admin
	Will apply a program in infra
	maanage infra

======================================================
How to become Dev?
------------------------------------------------------
JDK -> .JAVA -> CLASS > JAR -> WAR -----> OPS/TEST\
  -----vars
  -----conditions
  -----looping
  ------import
  -------operators
  -------functions

Ansible -> .yaml(playbook) -> role -----> OPS/TEST
  	-----vars
  	-----conditions
  	-----looping
  	------import
  	-------operators
  	-------functions

=====================================================================================


	using ADHOC command 
		Do one task in ONE MACHINE(localhost)		DONE
		Do one task in ONE REMOTE MACHINE		DONE
		Do one task in MULTIPLE REMOTE MACHINES using Inventory	DONE
		Do one task in MULTIPLE REMOTE MACHINES using group in Inventory DONE


=====================================================================================
ACS - 13.232.239.181
ARS - 52.66.111.23

How to install Ansible?
----------------------------------
https://www.devopsschool.com/blog/how-to-install-ansible-in-centos-7-rhel-7/
$ sudo yum install wget -y
$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ sudo rpm -i epel-release-latest-7.noarch.rpm
$ sudo yum install ansible -y
$ systemctl stop firewalld
$ systemctl disable firewalld
ansible



  10  ansible
   11  ansible --version


Define and run a single task 'playbook' against a set of hosts

positional arguments:
  pattern               host pattern

optional arguments:
===============================================
  --ask-vault-pass      ask for vault password
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  --playbook-dir BASEDIR
                        Since this tool does not use playbooks, use this as a
                        substitute playbook directory.This sets the relative
                        path for many features including roles/ group_vars/
                        etc.
  --syntax-check        perform a syntax check on the playbook, but do not
                        execute it
  --vault-id VAULT_IDS  the vault identity to use
  --vault-password-file VAULT_PASSWORD_FILES
                        vault password file
  --version             show program's version number, config file location,
                        configured module search path, module location,
                        executable location and exit
  -B SECONDS, --background SECONDS
                        run asynchronously, failing after X seconds
                        (default=N/A)
  -C, --check           don't make any changes; instead, try to predict some
                        of the changes that may occur
  -D, --diff            when changing (small) files and templates, show the
                        differences in those files; works great with --check
  -M MODULE_PATH, --module-path MODULE_PATH
                        prepend colon-separated path(s) to module library (def
                        ault=~/.ansible/plugins/modules:/usr/share/ansible/plu
                        gins/modules)
  -P POLL_INTERVAL, --poll POLL_INTERVAL
                        set the poll interval if using -B (default=15)
  -a MODULE_ARGS, --args MODULE_ARGS
                        module arguments
  -e EXTRA_VARS, --extra-vars EXTRA_VARS
                        set additional variables as key=value or YAML/JSON, if
                        filename prepend with @
  -f FORKS, --forks FORKS
                        specify number of parallel processes to use
                        (default=5)
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory INVENTORY, --inventory-file INVENTORY
                        specify inventory host path or comma separated host
                        list. --inventory-file is deprecated
  -l SUBSET, --limit SUBSET
                        further limit selected hosts to an additional pattern
  -m MODULE_NAME, --module-name MODULE_NAME
                        module name to execute (default=command)
  -o, --one-line        condense output
  -t TREE, --tree TREE  log output to this directory
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)

Privilege Escalation Options:
============================================================
  control how and which user you become as on target hosts

  --become-method BECOME_METHOD
                        privilege escalation method to use (default=sudo), use
                        `ansible-doc -t become -l` to list valid choices.
  --become-user BECOME_USER
                        run operations as this user (default=root)
  -K, --ask-become-pass
                        ask for privilege escalation password
  -b, --become          run operations with become (does not imply password
                        prompting)

Connection Options:
================================================================
  control as whom and how to connect to hosts

  --private-key PRIVATE_KEY_FILE, --key-file PRIVATE_KEY_FILE
                        use this file to authenticate the connection
  --scp-extra-args SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
  --sftp-extra-args SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
  --ssh-common-args SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
  --ssh-extra-args SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)
  -T TIMEOUT, --timeout TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
  -c CONNECTION, --connection CONNECTION
                        connection type to use (default=smart)
  -k, --ask-pass        ask for connection password
  -u REMOTE_USER, --user REMOTE_USER
                        connect as this user (default=None)

Some modules do not make sense in Ad-Hoc (include, meta, etc)
=======================================================================
Components of Ansible (ACS)
=================================
Ansible
	Config	- /etc/ansible/ansible.cfg - This would change behaviour of ansble.
	Module - 

configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
ansible python module location = /usr/lib/python2.7/site-packages/ansible

- Module represets ONE resources of Server.
		& Property 
		& state

List of modules
=======================
https://docs.ansible.com/ansible/latest/modules/modules_by_category.html


inventory
==================================================
is LIST of IP address.
		COMMAND
		file
		directory
		Script

Playbook
yaml file

	play1
		Hosts: group
		Tasks
			Task1 - Module name with param
			Task2 - Module name with param
			Task3 - Module name with param
	play2
		Hosts:
		Tasks
	play3
		Hosts:
		Tasks



Access	

============================================================================================
Lets work on project.
==============================================================
Setup a web server
====================================
Step 1: install httpd
Step 2: copy a index.html into /var/www/html
Step 3: start a service
Step 4 - create a user "deploy"
Step 5 - create a file

ansible localhost -m yum -a"name=httpd state=present"
ansible localhost -m copy -a"dest=/var/www/html src=index.html"
ansible localhost -m service -a"name=httpd state=started"
ansible localhost -m user -a"name=rajesh"
ansible localhost -m file -a"path=/opt/ansible.txt state=touch"
=======================================================================================
TEST 1 - https://www.devopsschool.com/blog/ansible-adhoc-commands-lab-excercise-part-1/

======================
30 mins



ACS - 13.232.239.181
ARS - 52.66.111.23

ansible all -i 52.66.111.23, -m yum -a"name=httpd state=present" -u ec2-user --key-file=node.pem -b
ansible all -i 52.66.111.23, -m copy -a"dest=/var/www/html src=index.html" -u ec2-user --key-file=node.pem -b
ansible all -i 52.66.111.23, -m service -a"name=httpd state=started" -u ec2-user --key-file=node.pem -b


How to auth remote machine?
	username - passowrd
	username - key

ansible all -i 

52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.66.111.23,52.

66.111.23,52.66.111.23, -m yum -a"name=httpd state=present" -u ec2-user --key-file=node.pem -b

[root@ip-172-31-19-251 ~]# more inventory
13.232.239.181
52.66.111.23


ansible all -i inventory -m yum -a"name=httpd state=present" -u ec2-user --key-file=node.pem -b
ansible all -i inventory -m copy -a"dest=/var/www/html src=index.html" -u ec2-user --key-file=node.pem -b
ansible all -i inventory -m service -a"name=httpd state=started" -u ec2-user --key-file=node.pem -b



[root@ip-172-31-19-251 ~]# more inventory
[webserver]
13.232.239.181
52.66.111.23

[dbserver]
3.4.4.4
5.6.6.6
7.8.8.8

ansible webserver -i inventory -m yum -a"name=httpd state=present" -u ec2-user --key-file=node.pem -b
ansible webserver -i inventory -m copy -a"dest=/var/www/html src=index.html" -u ec2-user --key-file=node.pem -b
ansible webserver -i inventory -m service -a"name=httpd state=started" -u ec2-user --key-file=node.pem -b







---
- name: This sets up an httpd webserver
  hosts: all
  vars:
    myname: "rajesh kumar"
    package: "httpd"
    service: "httpd"
  tasks:
  - name: Install the httpd apps
    yum: name={{ package }} state=installed
  - name: start the httpd service
    service: name={{ service }} state=started
  - name: create a empty fle
    file: dest=/opt/test.txt state=touch
  - name: copy a file
    copy: dest=/var/www/html/ src="index.html"
  - name: Ansible debug print example.
    debug:
      msg: "{{ myname }}"



#ansible-playbook -i inventory playbook.yaml -u ec2-user --key-file=node.pem -b 
===================
devops@Rajeshkumar.xyz

