http://52.66.207.154:8080/
rajesh
rajesh123



========================================================================
========================================================================
Working with Jenkins - Basic Workflow in jenkins
===================================================
SECRET FORMULA
===============
Question 1 - What is your technology?
		java

Question 2 - What is your Builder?
		maven

Question 3 - Where is your source Code?
		git
		https://github.com/devopsschool-demo-labs-projects/helloworld-java-maven

Question 4 - How often you want to trigger this job?
		daily

Question 5 - Whom you want to send feedback?	
		rajesh@scmgalaxy.com

==========================================================================================
===========================================================================================
Jenkins
https://www.devopsschool.com/videos/show/jenkins?type=video

Pipeline jenkinsfile code
https://github.com/devopsschool-sample-programs/jenkins-groovy-scripts-collection
https://github.com/devopsschool-sample-programs/jenkins-jenkinsfile-example-collection
https://www.devopsschool.com/videos/387/complete-cicd-devops-implementation-from-scratch-using-

jenkins-by-devopsschool/
==========================================================================
==========================================================================
==========================================================================
Docker
===========================================================================
RUN APP
=============================
physcial --> VIRTUAL --> CONTAINER
=============================================================
What is Docker?
	Container mgmt tool.

What is Container?
=============================
	Lightweight
	indepent 
	app
	runtime
	env


Container is noting but
		userspace
			with
				their own
					MOUNT
					Net
					PMAP

Containers are nothing user so its powered by KERANL but manage docker.




3 APPS
==========================
CPU + RAM + STORAGE + OS
====================================

What are the things you need to run any app in COMPUTE unit
====================================================
OS -> KERANL -> 
		NAMESPACE
			USER - 1	MANY
			NET  - 1	
			PMAP - 1
			MOUNT - 1
		CGROUPS
			IO
			CPU
			RAM
		CAPABILITY 
			ACCESS
==============================================
How to More app in the same HARDWARE?

=============================================================================
https://www.devopsschool.com/videos/show/video?type=video

Components of Docker
===============================================
Docker Engine  - A tool which need to be install.
	human -> Docker Clinet -> RESTAPI -> Docker Deamon --> ContainerD -> RUNC -> Kernal
https://www.devopsschool.com/tutorial/docker/install-config/docker-install-commuityedition-centos-

rhel.html
=============================================================================
=====================================================================================
Step 1 - Install required packages. yum-utils provides the yum-config-manager utility, and device-

mapper-persistent-data and lvm2 are required by the devicemapper storage driver.
$ sudo -s
$ 
$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2

Step 2 - Use the following command to set up the stable repository
$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

Step 3 - Install the latest version of Docker CE
$ sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
$ sudo yum install -y docker-ce
$ sudo yum install docker-ce
# Verify Docker Installations
$ docker -v

# Docker is installed but not started. The docker group is created, but no users are added to the 

group.

Step 4 - Enable Docker
$ sudo systemctl enable docker

Step 5 - Start Docker
$ sudo systemctl start docker
$ docker info
=====================================================================================
=====================================================================================
Docker Image
	ROOTFS + APPFS 

Docker Registry
	https://hub.docker.com/
		Repository
		jenkins
Docker container
	run image - get one container
	run 10 time - 10 container




OS
====================
bootfs -> rootfs -> appfs 




Lets start working with containers
==============================================================================
create -> start -> stop -> start-> pause -> unpause -> kill ->start -> stop -> remove


How to check running container?
$ docker ps
How to check all container?
$ docker ps -a
How to check images in my docker?
$ docker images

204  more /etc/passwd
  205  clear
  206  docker
  207  clear
  208  clear
  209  docker ps
  210  docker ps -a
  211  docker rm 46a93ba62f30
  212  clear
  213  cd
  214  clear
  215  ls
  216  docker ps
  217  docker ps -a
  218  docker images
  219  docker pull jenins
  220  docker pull jenkins
  221  clear
  222  docker images
  223  clear
  224  ls
  225  docker create jenkins
  226  docker ps
  227  docker ps -a
  228  docker create jenkins
  229  docker ps -a
  230  clear
  231  docker ps -a
  232  docker start b705a8d8381d
  233  docker ps -a
  234  docker stop b705a8d8381d
  235  docker ps -a
  236  clear
  237  docker ps -a
  238  docker start b705a8d8381d
  239  docker ps -a
  240  docker pause b705a8d8381d
  241  docker ps -a
  242  clear
  243  docker unpause b705a8d8381d
  244  clear
  245  docker ps -a
  246  docker kill b705a8d8381d
  247  docker ps -a
  248  docker start b705a8d8381d
  249  docker ps -a
  250  clear
  251  docker stop b705a8d8381d
  252  docker ps -a
  253  docker rm b705a8d8381d
  254  docker ps -a
  255  history

WHAT IS PID 1
=====================================
PM 				VM				Container

running 			running 			running 
as long as 			as long as			as long as 
PID 1 is running		PID 1 is running		PID 1 is running	

systemd				systemd				ANYTHING


How to access(go inside) container?
==================================
exec
	will execute an executable inside a container and retrun 
	- it and /bin/bash
attach 
	it would get attached to a terminal of PID1

How to come out of container saftly?
control+p+q

 271  docker ps -a
  272  clear
  273  docker ps
  274  docker exec 9922e6b3b20a ps -eaf
  275  docker exec 82f81f610d61 ps -eaf
  276  docker unpuase 82f81f610d61
  277  docker unpause 82f81f610d61
  278  clear
  279  docker exec 82f81f610d61 ps -eaf
  280  docker run -its ubunti
  281  docker run -its ubuntu
  282  docker run -itd ubuntu
  283  docker ps
  284  docker exec ea36a271f106 ps -eaf
  285  docker exec 82f81f610d61 ps -eaf
  286  clear
  287  docker ps
  288  docker exec ea36a271f106 ls
  289  docker exec ea36a271f106 df -kh
  290  clear
  291  docker exec ea36a271f106 ffff
  292  clear
  293  which sh
  294  clear
  295  echo $SHEL
  296  echo $SHELL
  297  clear
  298  docker ps
  299  docker exec -it ea36a271f106 /bin/bash
  300  clear
  301  clear
  302  docker ps
  303  docker attach ea36a271f106
  304  clear
  305  docker ps
  306  docker attach 9922e6b3b20a
  307  clear
  308  docker ps
  309  dcoker attach 82f81f610d61
  310  dcoker attach 82f81f610d61
  311  docker attach 82f81f610d61
  312  clear
  313  docker ps
  314  history



How to use container?
==================================
docker run -d -p 8080:8080 jenkins
docker run -d -p 8090:8080 jenkins




 313  docker ps
  314  history
  315  c
  316  ceaclear
  317  clear
  318  ifconfig
  319  clear
  320  docker ps -a
  321  docker stop $(docker ps -a -q)
  322  docker rm $(docker ps -a -q)
  323  clear
  324  docker ps -a
  325  ifconfig
  326  clear
  327  docker run -itd ubuntu
  328  docker ps
  329  ifconfig
  330  clear
  331  docker ps
  332  docker inspect 482ae3c83df1
  333  clear
  334  ping 172.17.0.2
  335  docker run -d jenkins
  336  docker ps
  337  docker inspect 1efc2b5139f6
  338  curl http://172.17.0.3:8080
  339  clear
  340  docker -s
  341  clear
  342  docker ps
  343  docker stop 1efc2b5139f6 482ae3c83df1
  344  docker rm 1efc2b5139f6 482ae3c83df1
  345  clear
  346  docker run -d -p 8080:8080 jenkins
  347  docker ps
  348  ps -eaf
  349  clear
  350  ps -eaf | grep jenkins
  351  systemctl stop jenkins
  352  clear
  353  docker ps
  354  docker run -d -p 8080:8080 jenkins
  355  docker run -d -p 8090:8080 jenkins
  356  docker ps
  357  history









